<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ohgiraffers.section01.dynamic.DynamicSqlMapper"> <!-- DynamicSqlMapper 파일 풀 경로 입력 (일치) -->
    <!-- comment. 조건절 작성 : 넘겨받은 price가 0 ~ 10,000원 사이일 때, 10,000 ~ 20,000원 사이일 때,
                20,000 ~ 30,000원 사이일 때, 30,000원 초과일 때 -->

    <!-- comment. <if> 테크 : test 속성의 조건에 해당할 때만 엘리먼트 구문을 쿼리에 추가
            또다른 테그 : gte(크거나 같음), gt(보다 큼), lte(작거나 같음), lt(보다 작음) 등등
            <![CDATA[문장]]> 문장에 해당하는 공간에서는 부등호 표현이 자유롭다. -->

    <!-- comment. 별칭 설정도 config 파일에서 할 수 있다. -->
    <resultMap id="menuResultMap" type="MenuDTO"> <!-- mybatis-config.xml 파일에서 <typeAliases> MenuDTO 로 별칭 설정 했으므로
                                                    풀네임이 아닌 MenuDTO로 작성-->
        <id property="code" column="MENU_CODE"/>
        <result property="name" column="MENU_NAME"/>
        <result property="price" column="MENU_PRICE"/>
        <result property="categoryCode" column="CATEGORY_CODE"/>
        <result property="orderableStatus" column="ORDERABLE_STATUS"/>

    </resultMap>

    <select id="selectMenuByPrice" parameterType="hashmap" resultMap="menuResultMap" resultType="MenuDTO">
            <!-- map으로 보내므로 parameterType도 hashmap으로 -->
        SELECT
             MENU_CODE
            ,MENU_NAME
            ,MENU_PRICE
            ,CATEGORY_CODE
            ,ORDERABLE_STATUS
        FROM
            TBL_MENU
        WHERE
            ORDERABLE_STATUS = 'Y'
        <if test="price gte 0 and price lte 10000"> <!-- price가 0보다 크거나 같거나 price가 10000보다 작거나 같음 -->
             <![CDATA[
             AND MENU_PRICE < #{price}
             ]]>
        </if>
        <if test="price gt 10000 and price lte 20000">
            AND MENU_PRICE BETWEEN 10000 AND #{price} <!-- 사이 값 작성 시 BETWEEN 작성 가능하다. -->
        </if>
        <if test="price gt 20000 and price lte 30000">
            AND MENU_PRICE BETWEEN 20000 AND #{price} <!-- 사이 값 작성 시 BETWEEN 작성 가능하다. -->
        </if>
        <if test="price gt 30000">
            AND MENU_PRICE BETWEEN 30000 AND #{price} <!-- 사이 값 작성 시 BETWEEN 작성 가능하다. -->
        </if>
        ORDER BY MENU_CODE
    </select>

    <!-- condition이라는 변수에 메뉴와 카테고리를 입력할 수 있는데,
        메뉴로 선택을 하면 join할 필요 없이, 검색어에 해당하는 메뉴 조회
        condition이라는 변수에 카테고리로 선택을 하면 join해서 카테고리 명에 해당하는 메뉴 조회 -->
    <select id="searchMenu" parameterType="com.ohgiraffers.common.SearchCriteria" resultMap="menuResultMap">
        SELECT
             A.MENU_CODE
            ,A.MENU_NAME
            ,A.CATEGORY_CODE
            ,A.ORDERABLE_STATUS
        FROM
             TBL_MENU A
        <if test="condition == 'category'"> <!-- category일 경우에만 실행 -->
            JOIN TBL_CATEGORY B ON (A.CATEGORY_CODE = B.CATEGORY_CODE)
        </if>
        WHERE A.ORDERABLE_STATUS = 'Y'
        <if test="condition == 'menuName'"> <!-- menuName일 경우에만 실행 -->
            AND A.MENU_NAME LIKE CONCAT('%', #{value}, '%')
        </if>
        <if test="condition == 'category'"> <!-- category일 경우에만 실행 -->
            AND B.CATEGORY_NAME = #{value}
        </if>
        ORDER BY A.MENU_CODE
    </select>

    <!-- comment. <choose>(when/otherwise) 태크 : java의 switch-case문의 역할
            <choose>
                <when test="조건">
                    쿼리문
                </when>
                ''' (when 구문이 많이 늘어날 수 있다는 뜻.)
                <otherwise>
                    쿼리문
                </otherwise>
            </choose>
            test 속성에 부합하면 해당하는 when 구문의 쿼리 동작
            어떠한 when 구문의 조건도 만족하지 않는다면 otherwise 구문의 쿼리 동작 -->
    <select id="searchMenuBySupCategory" parameterType="com.ohgiraffers.common.SearchCriteria" resultMap="menuResultMap">
        SELECT
            *
        FROM
            TBL_MENU
        WHERE
            ORDERABLE_STATUS = 'Y'
        <choose> <!-- 노션에서 전체 테이블 확인해가며 복습 -->
            <when test="value == '식사'">
                AND CATEGORY_CODE IN (1, 4, 5) <!-- 카테고리 코드가 1,4,5를 포함하고 있는지 -->
            </when>
            <when test="value == '음료'">
                AND CATEGORY_CODE IN (2) <!-- 카테고리 코드가 2를 포함하고 있는지 -->
            </when>
            <otherwise>
                AND CATEGORY_CODE IN (3) <!-- 식사, 음료를 제외하면 모두 디저트 -->
            </otherwise>
        </choose>
        ORDER BY MENU_CODE
    </select>

    <!-- comment.
            <foreach> 태그 : java에서 했던 for문의 역할을 한다.
            1. collection 속성 : 반복을 수행할 대상
            2. item 속성 : 반복을 수행할 때마다 꺼내올 값을 담아둘 변수
            3. open 속성 : <foreach> 엘리먼트 구문의 가장 앞에 올 문자
            4. separator 속성 : 반복이 수행될 때 item 사이에 들어갈 문자
            5. close 속성 : <foreach> 엘리먼트 구문의 마지막에 올 문자 -->
                                                                <!-- resultType 작성 유무 -->
    <select id="searchMenuByRandomCode" resultMap="menuResultMap" resultType="MenuDTO" parameterType="hashmap">
        SELECT
            *
        FROM
            TBL_MENU
        WHERE
            ORDERABLE_STATUS = 'Y'
        AND
            MENU_CODE IN <!-- 여기에 바로 (1, 2 ~ 와 같이) 지정하면 랜덤한 수가 안 담기므로 foreach를 사용해야 한다. -->
        <!-- collection에 key값 전달 / item에 향상된 for문과 대조해보기 / open은 소괄호를 열어주고, 마지막에 닫아줘라라는 뜻
         → SQL상 문법을 일치 시킨다. 소괄호를 열어주고 5개에 들어있는 변수를 하나씩 열어주고 ,가 붙고 반복 이후 소괄호 닫아준다 -->
        <foreach collection="randomCodeList" item="byunsu" open="(" close=")" separator=",">
            #{byunsu}
        </foreach>

    </select>

    <!-- 검색 조건이 없으면 전체 조회, 있으면 menuCode로 조회 -->
    <!-- SearchCriteria 풀경로를 Search로 별칭 설정 -->
    <select id="searchMenuByCodeOrSearchAll" parameterType="Search" resultMap="menuResultMap" resultType="MenuDTO">
        SELECT
            *
        FROM
            TBL_MENU
        <if test="condition != null and condition eq 'menuCode'"> <!-- condition 조건이 있으면서 menuCode이면 -->
            <where>
                MENU_CODE = #{value}
            </where>
        </if>

    </select>
    <select id="searchMenuByNameOrCategory" resultType="MenuDTO" resultMap="menuResultMap" parameterType="hashmap">
        SELECT
            *
        FROM
            TBL_MENU
        <!-- index. 1. 문제상황 : 카테고리로만 조회하는 경우 WHERE 생략으로 인한 문법 오류 발생 -->
<!--        <if test="nameValue != null">-->
<!--            WHERE MENU_NAME LIKE CONCAT('%' , #{nameValue} , '%')-->
<!--        </if>-->
<!--        <if test="categoryValue != null">-->
<!--            AND CATEGORY_CODE = #{categoryCode}-->
<!--        </if>-->
        <!-- comment. 1. 문제 해결 방안 <where> 태그 사용
                where 태그
                - 내부에 구문이 where 절 시작하지 않는다면 자동으로 where 붙여준다.
                - 또한, where 엘리먼트 내부에 모든 쿼리문이 동작하지 않는다면 where 무시한다.
                - 주의점은 쿼리문에 where를 직접 입력하면 where WHERE 구문이 되므로 주의
                - 엘리먼트 구문이 AND || OR로 시작하면 자동으로 지워준다. -->
<!--        <where>-->
<!--            <if test="nameValue != null">-->
<!--                MENU_NAME LIKE CONCAT('%' , #{nameValue} , '%')-->
<!--            </if>-->
<!--            <if test="categoryValue != null">-->
<!--                AND CATEGORY_CODE = #{categoryValue}-->
<!--            </if>-->
<!--        </where>-->
        <!-- comment. 2. 문제 해결 방안 <trim> 태그 사용
                trim 태그
                - where 엘리먼트가 기본적으로 처리하는 기능 외에 추가적인 기능을 수행한다.
                - 조회 조건에 AND || OR로 시작하지 않는, 다른 문자로 시작하는 경우
                1. prefix 속성 : 처리 후 엘리먼트의 내용이 있으면 가장 앞에 붙여주는 내용 기술
                2. prefixOverrides 속성 : 처리 후 엘리먼트의 내용이 있으면 가장 앞에 속성 값에 해당하는 문자 삭제
                3. suffix 속성 : 처리 후 엘리먼트의 내용이 있으면 가장 뒤에 붙여주는 내용 기술
                4. suffixOverrides 속성 : 처리 후 엘리먼트 내용 중 가장 뒤에 속성 값에 해당하는 문자 삭제 -->
                <trim prefix="WHERE" prefixOverrides="AND | OR"> <!-- 위 내용을 trim 방식으로 표현, 하브루타 해보기-->
                    <if test="nameValue != null">
                    MENU_NAME LIKE CONCAT('%' , #{nameValue} ,'%')
                    </if>
                    <if test="categoryValue != null">
                    AND CATEGORY_CODE = #{categoryValue}
                    </if>
                </trim>
    </select>
    <update id="modifyMenu" parameterType="hashmap">
        <!-- 이 쿼리문은 모든 컬럼에 대해 수정할 값을 입력한다는 가정하에 작성 되었다.
            값을 입력한 일부 컬럼만 변경하고 싶다면?
            <if> 태그를 사용해서 일부 컬럼만 수정되게 바꿔보자 -->
<!--        UPDATE-->
<!--            TBL_MENU-->
<!--        SET-->
<!--            MENU_NAME = #{name}-->
<!--            ,CATEGORY_CODE = #{categoryCode}-->
<!--            ,ORDERABLE_STATUS = #{orderableStatus}-->
<!--        WHERE-->
<!--            MENU_CODE = #{code}-->

        UPDATE TBL_MENU
        <if test="name != null and name != ''">
            SET MENU_NAME = #{name}
            <if test="categoryCode != null and categoryCode gt 0">
                , CATEGORY_CODE = #{categoryCode}
            </if>
        </if>
    </update>
</mapper>
